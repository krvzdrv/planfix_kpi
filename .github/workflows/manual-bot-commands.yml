name: Manual Bot Commands

on:
  repository_dispatch:
    types: [telegram_command]

jobs:
  handle-telegram-command:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Warsaw

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Log command details
        run: |
          echo "Command: ${{ github.event.client_payload.command }}"
          echo "Chat ID: ${{ github.event.client_payload.chat_id }}"
          echo "User ID: ${{ github.event.client_payload.user_id }}"
          echo "User Name: ${{ github.event.client_payload.user_name }}"

      # ============================================
      # SYNC COMMANDS
      # ============================================
      
      - name: Sync All Data
        if: github.event.client_payload.command == 'sync_all'
        env:
          PLANFIX_API_KEY: ${{ secrets.PLANFIX_API_KEY }}
          PLANFIX_TOKEN: ${{ secrets.PLANFIX_TOKEN }}
          PLANFIX_ACCOUNT: ${{ secrets.PLANFIX_ACCOUNT }}
          SUPABASE_CONNECTION_STRING: postgresql://${{ secrets.SUPABASE_USER }}:${{ secrets.SUPABASE_PASSWORD }}@${{ secrets.SUPABASE_HOST }}:${{ secrets.SUPABASE_PORT }}/${{ secrets.SUPABASE_DB }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ github.event.client_payload.chat_id }}
        run: |
          echo "ðŸ”„ Syncing all data from Planfix..."
          curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"ðŸ”„ Rozpoczynam synchronizacjÄ™ wszystkich danych z Planfix...\",\"parse_mode\":\"Markdown\"}"
          
          python scripts/exporters/planfix_export_clients.py
          python scripts/exporters/planfix_export_orders.py
          python scripts/exporters/planfix_export_tasks.py
          
          curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"âœ… Synchronizacja zakoÅ„czona pomyÅ›lnie!\",\"parse_mode\":\"Markdown\"}"

      - name: Sync Clients
        if: github.event.client_payload.command == 'sync_clients'
        env:
          PLANFIX_API_KEY: ${{ secrets.PLANFIX_API_KEY }}
          PLANFIX_TOKEN: ${{ secrets.PLANFIX_TOKEN }}
          PLANFIX_ACCOUNT: ${{ secrets.PLANFIX_ACCOUNT }}
          SUPABASE_CONNECTION_STRING: postgresql://${{ secrets.SUPABASE_USER }}:${{ secrets.SUPABASE_PASSWORD }}@${{ secrets.SUPABASE_HOST }}:${{ secrets.SUPABASE_PORT }}/${{ secrets.SUPABASE_DB }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ github.event.client_payload.chat_id }}
        run: |
          echo "ðŸ”„ Syncing clients from Planfix..."
          curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"ðŸ”„ Synchronizacja klientÃ³w z Planfix...\",\"parse_mode\":\"Markdown\"}"
          
          python scripts/exporters/planfix_export_clients.py
          
          curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"âœ… Klienci zsynchronizowani!\",\"parse_mode\":\"Markdown\"}"

      - name: Sync Orders
        if: github.event.client_payload.command == 'sync_orders'
        env:
          PLANFIX_API_KEY: ${{ secrets.PLANFIX_API_KEY }}
          PLANFIX_TOKEN: ${{ secrets.PLANFIX_TOKEN }}
          PLANFIX_ACCOUNT: ${{ secrets.PLANFIX_ACCOUNT }}
          SUPABASE_CONNECTION_STRING: postgresql://${{ secrets.SUPABASE_USER }}:${{ secrets.SUPABASE_PASSWORD }}@${{ secrets.SUPABASE_HOST }}:${{ secrets.SUPABASE_PORT }}/${{ secrets.SUPABASE_DB }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ github.event.client_payload.chat_id }}
        run: |
          echo "ðŸ”„ Syncing orders from Planfix..."
          curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"ðŸ”„ Synchronizacja zamÃ³wieÅ„ z Planfix...\",\"parse_mode\":\"Markdown\"}"
          
          python scripts/exporters/planfix_export_orders.py
          
          curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"âœ… ZamÃ³wienia zsynchronizowane!\",\"parse_mode\":\"Markdown\"}"

      - name: Sync Tasks
        if: github.event.client_payload.command == 'sync_tasks'
        env:
          PLANFIX_API_KEY: ${{ secrets.PLANFIX_API_KEY }}
          PLANFIX_TOKEN: ${{ secrets.PLANFIX_TOKEN }}
          PLANFIX_ACCOUNT: ${{ secrets.PLANFIX_ACCOUNT }}
          SUPABASE_CONNECTION_STRING: postgresql://${{ secrets.SUPABASE_USER }}:${{ secrets.SUPABASE_PASSWORD }}@${{ secrets.SUPABASE_HOST }}:${{ secrets.SUPABASE_PORT }}/${{ secrets.SUPABASE_DB }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ github.event.client_payload.chat_id }}
        run: |
          echo "ðŸ”„ Syncing tasks from Planfix..."
          curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"ðŸ”„ Synchronizacja zadaÅ„ z Planfix...\",\"parse_mode\":\"Markdown\"}"
          
          python scripts/exporters/planfix_export_tasks.py
          
          curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"âœ… Zadania zsynchronizowane!\",\"parse_mode\":\"Markdown\"}"

      # ============================================
      # REPORT COMMANDS
      # ============================================

      - name: Send All Reports
        if: github.event.client_payload.command == 'report_all'
        env:
          PLANFIX_API_KEY: ${{ secrets.PLANFIX_API_KEY }}
          PLANFIX_TOKEN: ${{ secrets.PLANFIX_TOKEN }}
          PLANFIX_ACCOUNT: ${{ secrets.PLANFIX_ACCOUNT }}
          SUPABASE_CONNECTION_STRING: postgresql://${{ secrets.SUPABASE_USER }}:${{ secrets.SUPABASE_PASSWORD }}@${{ secrets.SUPABASE_HOST }}:${{ secrets.SUPABASE_PORT }}/${{ secrets.SUPABASE_DB }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ github.event.client_payload.chat_id }}
        run: |
          echo "ðŸ“Š Sending all reports..."
          curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"ðŸ“Š GenerujÄ™ wszystkie raporty...\",\"parse_mode\":\"Markdown\"}"
          
          python scripts/reports/report_activity.py
          python scripts/reports/report_kpi.py
          python scripts/reports/report_bonus.py --period current
          python scripts/reports/report_income.py
          python scripts/reports/report_status.py
          
          curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"âœ… Wszystkie raporty wysÅ‚ane!\",\"parse_mode\":\"Markdown\"}"

      - name: Send Activity Report
        if: github.event.client_payload.command == 'report_activity'
        env:
          SUPABASE_CONNECTION_STRING: postgresql://${{ secrets.SUPABASE_USER }}:${{ secrets.SUPABASE_PASSWORD }}@${{ secrets.SUPABASE_HOST }}:${{ secrets.SUPABASE_PORT }}/${{ secrets.SUPABASE_DB }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ github.event.client_payload.chat_id }}
        run: |
          echo "ðŸ“Š Generating activity report..."
          python scripts/reports/report_activity.py
          echo "âœ… Activity report completed"

      - name: Send KPI Report
        if: github.event.client_payload.command == 'report_kpi'
        env:
          PLANFIX_API_KEY: ${{ secrets.PLANFIX_API_KEY }}
          PLANFIX_TOKEN: ${{ secrets.PLANFIX_TOKEN }}
          PLANFIX_ACCOUNT: ${{ secrets.PLANFIX_ACCOUNT }}
          SUPABASE_CONNECTION_STRING: postgresql://${{ secrets.SUPABASE_USER }}:${{ secrets.SUPABASE_PASSWORD }}@${{ secrets.SUPABASE_HOST }}:${{ secrets.SUPABASE_PORT }}/${{ secrets.SUPABASE_DB }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ github.event.client_payload.chat_id }}
        run: |
          echo "ðŸ“Š Generating KPI report..."
          python scripts/reports/report_kpi.py
          echo "âœ… KPI report completed"

      - name: Send Bonus Report (Current Month)
        if: github.event.client_payload.command == 'report_bonus'
        env:
          SUPABASE_CONNECTION_STRING: postgresql://${{ secrets.SUPABASE_USER }}:${{ secrets.SUPABASE_PASSWORD }}@${{ secrets.SUPABASE_HOST }}:${{ secrets.SUPABASE_PORT }}/${{ secrets.SUPABASE_DB }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ github.event.client_payload.chat_id }}
        run: |
          echo "ðŸ”„ Generating current month bonus report..."
          python scripts/reports/report_bonus.py --period current
          echo "âœ… Current month bonus report completed"

      - name: Send Bonus Report (Previous Month)
        if: github.event.client_payload.command == 'report_bonus_previous'
        env:
          SUPABASE_CONNECTION_STRING: postgresql://${{ secrets.SUPABASE_USER }}:${{ secrets.SUPABASE_PASSWORD }}@${{ secrets.SUPABASE_HOST }}:${{ secrets.SUPABASE_PORT }}/${{ secrets.SUPABASE_DB }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ github.event.client_payload.chat_id }}
        run: |
          echo "ðŸ”„ Generating previous month bonus report..."
          python scripts/reports/report_bonus.py --period previous
          echo "âœ… Previous month bonus report completed"

      - name: Send Income Report
        if: github.event.client_payload.command == 'report_income'
        env:
          SUPABASE_CONNECTION_STRING: postgresql://${{ secrets.SUPABASE_USER }}:${{ secrets.SUPABASE_PASSWORD }}@${{ secrets.SUPABASE_HOST }}:${{ secrets.SUPABASE_PORT }}/${{ secrets.SUPABASE_DB }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ github.event.client_payload.chat_id }}
        run: |
          echo "ðŸ“Š Generating income report..."
          python scripts/reports/report_income.py
          echo "âœ… Income report completed"

      - name: Send Status Report
        if: github.event.client_payload.command == 'report_status'
        env:
          SUPABASE_CONNECTION_STRING: postgresql://${{ secrets.SUPABASE_USER }}:${{ secrets.SUPABASE_PASSWORD }}@${{ secrets.SUPABASE_HOST }}:${{ secrets.SUPABASE_PORT }}/${{ secrets.SUPABASE_DB }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ github.event.client_payload.chat_id }}
        run: |
          echo "ðŸ“Š Generating status report..."
          python scripts/reports/report_status.py
          echo "âœ… Status report completed"

      - name: Notify on failure
        if: failure()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ github.event.client_payload.chat_id }}
        run: |
          curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"BÅ‚Ä…d podczas generowania raportu premii. SprÃ³buj ponownie pÃ³Åºniej.\",\"parse_mode\":\"Markdown\"}"
