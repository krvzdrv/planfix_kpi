name: Send KPI to Telegram

on:
  schedule:
    # Летнее время (март-октябрь): 17:00 UTC = 19:00 CEST
    - cron: '0 17 * 3-10 1-5'  # Март-Октябрь: 19:00 по варшавскому времени
    # Зимнее время (октябрь-март): 18:00 UTC = 19:00 CET
    - cron: '0 18 * 1-2,11-12 1-5'  # Январь-Февраль, Ноябрь-Декабрь: 19:00 по варшавскому времени
  workflow_dispatch:  # Для ручного запуска

jobs:
  update-and-send:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Warsaw
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-
            ${{ runner.os }}-python-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Update clients in Supabase
        id: update-clients
        run: |
          echo "Starting clients update..."
          python -c "import os; print('Environment variables:', {k: v[:3] + '...' if v else None for k, v in os.environ.items() if k.startswith(('PLANFIX_', 'SUPABASE_'))})"
          if ! python scripts/planfix_export_clients.py; then
            echo "::error::Failed to update clients"
            exit 1
          fi
        env:
          PLANFIX_API_KEY: ${{ secrets.PLANFIX_API_KEY }}
          PLANFIX_TOKEN: ${{ secrets.PLANFIX_TOKEN }}
          PLANFIX_ACCOUNT: ${{ secrets.PLANFIX_ACCOUNT }}
          SUPABASE_CONNECTION_STRING: ${{ secrets.SUPABASE_CONNECTION_STRING }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}

      - name: Update orders in Supabase
        id: update-orders
        if: steps.update-clients.outcome == 'success'
        run: |
          echo "Starting orders update..."
          python -c "import os; print('Environment variables:', {k: v[:3] + '...' if v else None for k, v in os.environ.items() if k.startswith(('PLANFIX_', 'SUPABASE_'))})"
          if ! python scripts/planfix_export_orders.py; then
            echo "::error::Failed to update orders"
            exit 1
          fi
        env:
          PLANFIX_API_KEY: ${{ secrets.PLANFIX_API_KEY }}
          PLANFIX_TOKEN: ${{ secrets.PLANFIX_TOKEN }}
          PLANFIX_ACCOUNT: ${{ secrets.PLANFIX_ACCOUNT }}
          SUPABASE_CONNECTION_STRING: ${{ secrets.SUPABASE_CONNECTION_STRING }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}

      - name: Update tasks in Supabase
        id: update-tasks
        if: steps.update-orders.outcome == 'success'
        run: |
          echo "Starting tasks update..."
          python -c "import os; print('Environment variables:', {k: v[:3] + '...' if v else None for k, v in os.environ.items() if k.startswith(('PLANFIX_', 'SUPABASE_'))})"
          if ! python scripts/planfix_export_tasks.py; then
            echo "::error::Failed to update tasks"
            exit 1
          fi
        env:
          PLANFIX_API_KEY: ${{ secrets.PLANFIX_API_KEY }}
          PLANFIX_TOKEN: ${{ secrets.PLANFIX_TOKEN }}
          PLANFIX_ACCOUNT: ${{ secrets.PLANFIX_ACCOUNT }}
          SUPABASE_CONNECTION_STRING: ${{ secrets.SUPABASE_CONNECTION_STRING }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}

      - name: Send Daily Activity Report
        id: send-activity
        if: steps.update-tasks.outcome == 'success'
        env:
          SUPABASE_CONNECTION_STRING: postgresql://${{ secrets.SUPABASE_USER }}:${{ secrets.SUPABASE_PASSWORD }}@${{ secrets.SUPABASE_HOST }}:${{ secrets.SUPABASE_PORT }}/${{ secrets.SUPABASE_DB }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "Starting daily activity report generation..."
          echo "Environment variables:"
          echo "SUPABASE_CONNECTION_STRING: ${SUPABASE_CONNECTION_STRING:+set}"
          echo "SUPABASE_HOST: ${SUPABASE_HOST:+set}"
          echo "SUPABASE_DB: ${SUPABASE_DB:+set}"
          echo "SUPABASE_USER: ${SUPABASE_USER:+set}"
          echo "SUPABASE_PASSWORD: ${SUPABASE_PASSWORD:+set}"
          echo "SUPABASE_PORT: ${SUPABASE_PORT:+set}"
          echo "TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:+set}"
          echo "TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID:+set}"
          
          # Check if all required variables are set
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
            echo "::error::Missing required Telegram configuration for daily activity report"
            exit 1
          fi
          
          # Run the script with debug output
          if ! python -u scripts/report_activity.py; then
            echo "::error::Failed to send daily activity report"
            exit 1
          fi

      - name: Send KPI to Telegram
        id: send-kpi
        if: steps.send-activity.outcome == 'success'
        env:
          PLANFIX_API_KEY: ${{ secrets.PLANFIX_API_KEY }}
          PLANFIX_TOKEN: ${{ secrets.PLANFIX_TOKEN }}
          PLANFIX_ACCOUNT: ${{ secrets.PLANFIX_ACCOUNT }}
          SUPABASE_CONNECTION_STRING: postgresql://${{ secrets.SUPABASE_USER }}:${{ secrets.SUPABASE_PASSWORD }}@${{ secrets.SUPABASE_HOST }}:${{ secrets.SUPABASE_PORT }}/${{ secrets.SUPABASE_DB }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "Starting KPI report generation..."
          echo "Environment variables:"
          echo "PLANFIX_API_KEY: ${PLANFIX_API_KEY:+set}"
          echo "PLANFIX_TOKEN: ${PLANFIX_TOKEN:+set}"
          echo "PLANFIX_ACCOUNT: ${PLANFIX_ACCOUNT:+set}"
          echo "SUPABASE_CONNECTION_STRING: ${SUPABASE_CONNECTION_STRING:+set}"
          echo "SUPABASE_HOST: ${SUPABASE_HOST:+set}"
          echo "SUPABASE_DB: ${SUPABASE_DB:+set}"
          echo "SUPABASE_USER: ${SUPABASE_USER:+set}"
          echo "SUPABASE_PASSWORD: ${SUPABASE_PASSWORD:+set}"
          echo "SUPABASE_PORT: ${SUPABASE_PORT:+set}"
          echo "TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:+set}"
          echo "TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID:+set}"
          
          # Check if all required variables are set
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
            echo "::error::Missing required Telegram configuration"
            exit 1
          fi
          
          # Run the script with debug output
          if ! python -u scripts/report_kpi.py; then
            echo "::error::Failed to send KPI report"
            exit 1
          fi

      - name: Calculate and Send KPI Premia
        id: send-premia
        if: steps.send-kpi.outcome == 'success'
        env:
          SUPABASE_CONNECTION_STRING: postgresql://${{ secrets.SUPABASE_USER }}:${{ secrets.SUPABASE_PASSWORD }}@${{ secrets.SUPABASE_HOST }}:${{ secrets.SUPABASE_PORT }}/${{ secrets.SUPABASE_DB }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "Starting KPI premia calculation..."
          echo "Environment variables:"
          echo "SUPABASE_CONNECTION_STRING: ${SUPABASE_CONNECTION_STRING:+set}"
          echo "SUPABASE_HOST: ${SUPABASE_HOST:+set}"
          echo "SUPABASE_DB: ${SUPABASE_DB:+set}"
          echo "SUPABASE_USER: ${SUPABASE_USER:+set}"
          echo "SUPABASE_PASSWORD: ${SUPABASE_PASSWORD:+set}"
          echo "SUPABASE_PORT: ${SUPABASE_PORT:+set}"
          echo "TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:+set}"
          echo "TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID:+set}"
          
          # Check if all required variables are set
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
            echo "::error::Missing required Telegram configuration for KPI premia"
            exit 1
          fi
          
          # Run the script with debug output
          if ! python -u scripts/report_bonus.py; then
            echo "::error::Failed to calculate and send KPI premia"
            exit 1
          fi

      - name: Send Income Report
        id: send-income
        if: steps.send-premia.outcome == 'success'
        env:
          SUPABASE_CONNECTION_STRING: postgresql://${{ secrets.SUPABASE_USER }}:${{ secrets.SUPABASE_PASSWORD }}@${{ secrets.SUPABASE_HOST }}:${{ secrets.SUPABASE_PORT }}/${{ secrets.SUPABASE_DB }}
          SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
          SUPABASE_DB: ${{ secrets.SUPABASE_DB }}
          SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
          SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "Starting income report generation..."
          echo "Environment variables:"
          echo "SUPABASE_CONNECTION_STRING: ${SUPABASE_CONNECTION_STRING:+set}"
          echo "SUPABASE_HOST: ${SUPABASE_HOST:+set}"
          echo "SUPABASE_DB: ${SUPABASE_DB:+set}"
          echo "SUPABASE_USER: ${SUPABASE_USER:+set}"
          echo "SUPABASE_PASSWORD: ${SUPABASE_PASSWORD:+set}"
          echo "SUPABASE_PORT: ${SUPABASE_PORT:+set}"
          echo "TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:+set}"
          echo "TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID:+set}"
          
          # Check if all required variables are set
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
            echo "::error::Missing required Telegram configuration for income report"
            exit 1
          fi
          
          # Run the script with debug output
          if ! python -u scripts/report_income.py; then
            echo "::error::Failed to generate and send income report"
            exit 1
          fi

      - name: Notify on failure
        if: failure()
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"${{ secrets.TELEGRAM_CHAT_ID }}\",\"text\":\"❌ KPI workflow failed at step: ${{ job.status }}\",\"parse_mode\":\"Markdown\"}"
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
