#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥—ã premia_current
"""
import os
import sys
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# GitHub –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN')
GITHUB_REPO = os.environ.get('GITHUB_REPO', 'krvzdrv/planfix_kpi')

def test_github_dispatch():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã –≤ GitHub Actions"""
    if not GITHUB_TOKEN:
        print("‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ GitHub Actions
        headers = {
            "Authorization": f"token {GITHUB_TOKEN}",
            "Accept": "application/vnd.github.v3+json",
            "User-Agent": "Planfix-KPI-Test/1.0"
        }
        payload = {
            "event_type": "telegram_command",
            "client_payload": {
                "chat_id": "123456789",  # –¢–µ—Å—Ç–æ–≤—ã–π chat_id
                "command": "premia_current",
                "user_id": "987654321",  # –¢–µ—Å—Ç–æ–≤—ã–π user_id
                "user_name": "Test User"
            }
        }

        github_url = f"https://api.github.com/repos/{GITHUB_REPO}/dispatches"
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ GitHub: {payload['client_payload']['command']}")
        print(f"GitHub URL: {github_url}")
        print(f"Payload: {payload}")

        response = requests.post(
            github_url,
            json=payload,
            headers=headers,
            timeout=10
        )

        print(f"üìä GitHub API Response Status: {response.status_code}")
        print(f"GitHub API Response Headers: {dict(response.headers)}")
        print(f"GitHub API Response Body: {response.text}")

        if response.status_code == 204:
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ GitHub Actions")
            return True
        elif response.status_code == 404:
            print(f"‚ùå Repository –Ω–µ –Ω–∞–π–¥–µ–Ω: {GITHUB_REPO}")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø —É —Ç–æ–∫–µ–Ω–∞")
            return False
        elif response.status_code == 401:
            print("‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ GitHub —Ç–æ–∫–µ–Ω–∞")
            return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GitHub: {response.status_code} - {response.text}")
            return False

    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_webhook_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook endpoint"""
    webhook_url = "https://planfix-kpi-webhook.onrender.com/api/telegram_webhook"
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å
        response = requests.get(webhook_url, timeout=10)
        print(f"üì° Webhook GET Response: {response.status_code}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        test_data = {
            "message": {
                "text": "/premia_current@SkorifyBot",
                "chat": {"id": "123456789"},
                "from": {"id": "987654321", "first_name": "Test User"}
            }
        }
        
        response = requests.post(webhook_url, json=test_data, timeout=10)
        print(f"üì° Webhook POST Response: {response.status_code}")
        print(f"Response Body: {response.text}")
        
        return response.status_code == 200
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã premia_current")
    print("=" * 50)
    
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook endpoint:")
    test_webhook_endpoint()
    
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GitHub dispatch:")
    test_github_dispatch()
