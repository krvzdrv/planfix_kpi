#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ TTL —Ç–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏
"""

import os
import sys
sys.path.append('.')

def test_ttl_all_tasks():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ TTL —Ç–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏"""
    
    print("=== –¢–ï–°–¢ TTL - –í–°–ï –ó–ê–î–ê–ß–ò ===")
    
    print("\nüìã –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: TTL —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –í–°–ï –∑–∞–¥–∞—á–∏")
    
    print("\nüîç –ù–æ–≤—ã–π SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è TTL:")
    sql_query = """
    SELECT
        owner_name AS manager,
        'TTL' AS task_type,
        COUNT(*) AS task_count
    FROM planfix_tasks
    WHERE
        data_zakonczenia_zadania IS NOT NULL
        AND data_zakonczenia_zadania >= %s::timestamp
        AND data_zakonczenia_zadania < %s::timestamp
        AND owner_name IN %s
        AND is_deleted = false
    GROUP BY owner_name
    """
    
    print(sql_query)
    
    print("\nüìä –£—Å–ª–æ–≤–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ TTL (–ò–°–ü–†–ê–í–õ–ï–ù–û):")
    conditions = [
        "data_zakonczenia_zadania IS NOT NULL (–∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)",
        "data_zakonczenia_zadania –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ",
        "owner_name –≤ —Å–ø–∏—Å–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ KPI",
        "is_deleted = false (–∑–∞–¥–∞—á–∞ –Ω–µ —É–¥–∞–ª–µ–Ω–∞)",
        "‚úÖ –í–°–ï –∑–∞–¥–∞—á–∏ (—É–±—Ä–∞–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)"
    ]
    
    for i, condition in enumerate(conditions, 1):
        print(f"{i}. {condition}")
    
    print("\nüéØ –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ TTL (–Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è):")
    calculation = """
    TTL –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç = (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–í–°–ï–•_–∑–∞–¥–∞—á / –ø–ª–∞–Ω_TTL) * –≤–µ—Å_TTL
    
    –ì–¥–µ:
    - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–í–°–ï–•_–∑–∞–¥–∞—á = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–°–ï–• –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    - –ø–ª–∞–Ω_TTL = –ø–ª–∞–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TTL –∑–∞–¥–∞—á (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã kpi_metrics)
    - –≤–µ—Å_TTL = –≤–µ—Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è TTL (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã kpi_metrics)
    """
    
    print(calculation)
    
    print("\nüìà –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ (—Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏):")
    example = """
    –ï—Å–ª–∏:
    - –§–∞–∫—Ç: 500 –í–°–ï–• –∑–∞–¥–∞—á (–≤–º–µ—Å—Ç–æ 254 —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤)
    - –ü–ª–∞–Ω: 300 –∑–∞–¥–∞—á TTL  
    - –í–µ—Å: 0.2
    
    –¢–æ–≥–¥–∞:
    TTL –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç = (500 / 300) * 0.2 = 0.333333... ‚âà 0.33
    """
    
    print(example)
    
    print("\n‚ö†Ô∏è  –í–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
    important_changes = [
        "TTL —Ç–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ—Ç –í–°–ï –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
        "–£–±—Ä–∞–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–¥–∞—á–∏",
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ TTL",
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 1.0, –µ—Å–ª–∏ —Ñ–∞–∫—Ç > –ø–ª–∞–Ω"
    ]
    
    for i, change in enumerate(important_changes, 1):
        print(f"{i}. {change}")
    
    print("\nüîß –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ:")
    code_changes = [
        "scripts/core/kpi_data.py: —É–±—Ä–∞–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ title",
        "scripts/telegram_bot.py: —É–±—Ä–∞–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ title",
        "TTL —Ç–µ–ø–µ—Ä—å = –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"
    ]
    
    for i, change in enumerate(code_changes, 1):
        print(f"{i}. {change}")

if __name__ == "__main__":
    test_ttl_all_tasks() 