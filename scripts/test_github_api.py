#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GitHub API –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/test_github_api.py
"""

import os
import requests
import json
from dotenv import load_dotenv

load_dotenv()

def test_github_token():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GitHub —Ç–æ–∫–µ–Ω–∞"""
    token = os.environ.get('GITHUB_TOKEN')
    if not token:
        print("‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json",
        "User-Agent": "Planfix-KPI-Test/1.0"
    }
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = requests.get("https://api.github.com/user", headers=headers)
        print(f"üîë –¢–µ—Å—Ç GitHub —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
        
        if response.status_code == 200:
            user_data = response.json()
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('login')}")
            print(f"   –ò–º—è: {user_data.get('name')}")
            return True
        elif response.status_code == 401:
            print("   ‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
            return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_repository_access():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"""
    token = os.environ.get('GITHUB_TOKEN')
    repo = os.environ.get('GITHUB_REPO')
    
    if not token or not repo:
        print("‚ùå GITHUB_TOKEN –∏–ª–∏ GITHUB_REPO –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json",
        "User-Agent": "Planfix-KPI-Test/1.0"
    }
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        response = requests.get(f"https://api.github.com/repos/{repo}", headers=headers)
        print(f"üì¶ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é: {response.status_code}")
        
        if response.status_code == 200:
            repo_data = response.json()
            print(f"   –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_data.get('full_name')}")
            print(f"   –í–∏–¥–∏–º–æ—Å—Ç—å: {repo_data.get('visibility')}")
            print(f"   –ü—Ä–∞–≤–∞: {repo_data.get('permissions', {})}")
            return True
        elif response.status_code == 404:
            print(f"   ‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {repo}")
            return False
        elif response.status_code == 401:
            print("   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é")
            return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_repository_dispatch():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ repository dispatch"""
    token = os.environ.get('GITHUB_TOKEN')
    repo = os.environ.get('GITHUB_REPO')
    
    if not token or not repo:
        print("‚ùå GITHUB_TOKEN –∏–ª–∏ GITHUB_REPO –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json",
        "User-Agent": "Planfix-KPI-Test/1.0"
    }
    
    payload = {
        "event_type": "test_dispatch",
        "client_payload": {
            "test": True,
            "message": "Test dispatch from diagnostic script"
        }
    }
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º repository dispatch
        response = requests.post(
            f"https://api.github.com/repos/{repo}/dispatches",
            json=payload,
            headers=headers
        )
        print(f"üöÄ –¢–µ—Å—Ç repository dispatch: {response.status_code}")
        
        if response.status_code == 204:
            print("   ‚úÖ Repository dispatch —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        elif response.status_code == 404:
            print(f"   ‚ùå Repository dispatch –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: {repo}")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞ (–Ω—É–∂–µ–Ω repo scope)")
            return False
        elif response.status_code == 401:
            print("   ‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è repository dispatch")
            return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def check_workflow_exists():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è workflow —Ñ–∞–π–ª–∞"""
    token = os.environ.get('GITHUB_TOKEN')
    repo = os.environ.get('GITHUB_REPO')
    
    if not token or not repo:
        print("‚ùå GITHUB_TOKEN –∏–ª–∏ GITHUB_REPO –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json",
        "User-Agent": "Planfix-KPI-Test/1.0"
    }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ workflow —Ñ–∞–π–ª–∞
        response = requests.get(
            f"https://api.github.com/repos/{repo}/contents/.github/workflows/telegram-dispatch.yml",
            headers=headers
        )
        print(f"üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ workflow —Ñ–∞–π–ª–∞: {response.status_code}")
        
        if response.status_code == 200:
            print("   ‚úÖ Workflow —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
            return True
        elif response.status_code == 404:
            print("   ‚ùå Workflow —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: .github/workflows/telegram-dispatch.yml")
            return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GitHub API")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print(f"   GITHUB_TOKEN: {'set' if os.environ.get('GITHUB_TOKEN') else 'not set'}")
    print(f"   GITHUB_REPO: {os.environ.get('GITHUB_REPO', 'not set')}")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    token_ok = test_github_token()
    print()
    
    repo_ok = test_repository_access()
    print()
    
    dispatch_ok = test_repository_dispatch()
    print()
    
    workflow_ok = check_workflow_exists()
    print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
    print("=" * 40)
    print(f"GitHub Token: {'‚úÖ OK' if token_ok else '‚ùå FAIL'}")
    print(f"Repository Access: {'‚úÖ OK' if repo_ok else '‚ùå FAIL'}")
    print(f"Repository Dispatch: {'‚úÖ OK' if dispatch_ok else '‚ùå FAIL'}")
    print(f"Workflow File: {'‚úÖ OK' if workflow_ok else '‚ùå FAIL'}")
    
    if token_ok and repo_ok and dispatch_ok and workflow_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("GitHub API –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏.")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if not token_ok:
            print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GITHUB_TOKEN")
        if not repo_ok:
            print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GITHUB_REPO (—Ñ–æ—Ä–º–∞—Ç: owner/repo)")
        if not dispatch_ok:
            print("- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ 'repo'")
        if not workflow_ok:
            print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ .github/workflows/telegram-dispatch.yml")

if __name__ == "__main__":
    main() 