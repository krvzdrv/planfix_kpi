import os
import sys
import logging
from datetime import datetime, date
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

sys.path.insert(0, os.path.dirname(__file__))

# Import functions from telegram_bot.py
from telegram_bot import generate_premia_report_for_month

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)

logger = logging.getLogger(__name__)

def test_current_month_report():
    """Test generating report for current month."""
    try:
        current_date = date.today()
        current_month = current_date.month
        current_year = current_date.year
        
        logger.info(f"Testing current month report for {current_month:02d}.{current_year}")
        
        report = generate_premia_report_for_month(current_month, current_year)
        
        print("\n" + "="*50)
        print("–û–¢–ß–ï–¢ –ó–ê –¢–ï–ö–£–©–ò–ô –ú–ï–°–Ø–¶")
        print("="*50)
        print(report)
        print("="*50)
        
        return True
        
    except Exception as e:
        logger.error(f"Error testing current month report: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_previous_month_report():
    """Test generating report for previous month."""
    try:
        current_date = date.today()
        
        # Calculate previous month
        if current_date.month == 1:
            previous_month = 12
            previous_year = current_date.year - 1
        else:
            previous_month = current_date.month - 1
            previous_year = current_date.year
        
        logger.info(f"Testing previous month report for {previous_month:02d}.{previous_year}")
        
        report = generate_premia_report_for_month(previous_month, previous_year)
        
        print("\n" + "="*50)
        print("–û–¢–ß–ï–¢ –ó–ê –ü–†–ï–î–´–î–£–©–ò–ô –ú–ï–°–Ø–¶")
        print("="*50)
        print(report)
        print("="*50)
        
        return True
        
    except Exception as e:
        logger.error(f"Error testing previous month report: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """Main test function."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–µ–º–∏–∏")
    print("="*50)
    
    # Test current month
    success1 = test_current_month_report()
    
    # Test previous month
    success2 = test_previous_month_report()
    
    # Summary
    print("\n" + "="*50)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    print(f"–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success1 else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success2 else '‚ùå –û—à–∏–±–∫–∞'}")
    
    if success1 and success2:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Telegram:")
        print("/premia_current - –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü")
        print("/premia_previous - –æ—Ç—á–µ—Ç –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

if __name__ == "__main__":
    main() 