#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã kpi_metrics –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
"""

import os
import sys
import psycopg2
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Add the parent directory to the Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import scripts.planfix_utils as planfix_utils

# –í—Å–µ –Ω—É–∂–Ω—ã–µ KPI –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
REQUIRED_KPI_INDICATORS = [
    'NWI', 'WTR', 'PSK', 'WDM', 'PRZ', 'KZI', 'ZKL', 'SPT', 'MAT', 
    'TPY', 'MSP', 'NOW', 'OPI', 'WRK', 'TTL', 'OFW', 'ZAM', 'PRC'
]

def get_table_structure():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã kpi_metrics"""
    conn = None
    try:
        conn = planfix_utils.get_supabase_connection()
        
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cur.execute("""
                SELECT 
                    column_name,
                    data_type,
                    is_nullable,
                    column_default
                FROM information_schema.columns 
                WHERE table_name = 'kpi_metrics' 
                ORDER BY ordinal_position
            """)
            
            columns = cur.fetchall()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            cur.execute("SELECT * FROM kpi_metrics LIMIT 1")
            sample_data = cur.fetchone()
            
            return columns, sample_data
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None
    finally:
        if conn:
            conn.close()

def analyze_kpi_metrics():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã kpi_metrics"""
    print("=== –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ KPI_METRICS ===\n")
    
    columns, sample_data = get_table_structure()
    
    if not columns:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã")
        return
    
    print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã kpi_metrics:")
    print("-" * 80)
    print(f"{'–ö–æ–ª–æ–Ω–∫–∞':<20} {'–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö':<15} {'NULL':<8}")
    print("-" * 80)
    
    existing_columns = []
    for col_name, data_type, is_nullable, default in columns:
        print(f"{col_name:<20} {data_type:<15} {is_nullable:<8}")
        existing_columns.append(col_name.lower())
    
    print("\n" + "=" * 80)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –° –ù–£–ñ–ù–´–ú–ò –ü–û–ö–ê–ó–ê–¢–ï–õ–Ø–ú–ò")
    print("=" * 80)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ
    missing_indicators = []
    existing_indicators = []
    
    for indicator in REQUIRED_KPI_INDICATORS:
        if indicator.lower() in existing_columns:
            existing_indicators.append(indicator)
            print(f"‚úÖ {indicator} - –ï–°–¢–¨ –≤ —Ç–∞–±–ª–∏—Ü–µ")
        else:
            missing_indicators.append(indicator)
            print(f"‚ùå {indicator} - –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ —Ç–∞–±–ª–∏—Ü–µ")
    
    print("\n" + "=" * 80)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 80)
    
    print(f"–í—Å–µ–≥–æ –Ω—É–∂–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {len(REQUIRED_KPI_INDICATORS)}")
    print(f"–ï—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(existing_indicators)}")
    print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(missing_indicators)}")
    
    if missing_indicators:
        print(f"\n–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: {', '.join(missing_indicators)}")
        
        print("\nSQL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫:")
        print("-" * 50)
        for indicator in missing_indicators:
            print(f"ALTER TABLE kpi_metrics ADD COLUMN {indicator.lower()} INTEGER;")
    else:
        print("\nüéâ –í—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
    if sample_data:
        print(f"\n–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:")
        print("-" * 50)
        for i, (col_name, _, _, _) in enumerate(columns):
            if i < len(sample_data):
                print(f"{col_name}: {sample_data[i]}")

if __name__ == "__main__":
    analyze_kpi_metrics() 